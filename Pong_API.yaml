openapi: 3.0.3
info:
  title: Pong API
  description: Trascendence web project at CODAM school.
  version: 1.0.0

servers:
  - url: 'http://{host}:{port}'
    variables:
      host:
        default: localhost
      port:
        default: '8080'

paths:

  /players:
    post:
      tags:
        - Player
      summary: Add player to the game.
      description: This allows you to add a single player.
      operationId: addPlayer

      requestBody:
        description: This is the player object.
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/player'

      responses:
        '201':
          description: The player has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/player'

    get:
      tags:
        - Player
      summary: Returns all the players.
      description: This allows get all players.
      operationId: getPlayers

      responses:
        '200':
          description: Successful list of players.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/players'

  # /players/login:
  #   get:
  #     tags:
  #       - Player
  #     summary: Logs player into the game
  #     description: ''
  #     operationId: loginPlayer
  #     parameters:
  #       - name: username
  #         in: query
  #         description: The user name for login
  #         required: false
  #         schema:
  #           type: string
  #       - name: password
  #         in: query
  #         description: The password for login in clear text
  #         required: false
  #         schema:
  #           type: string

  #     responses:
  #       '200':
  #         description: successful operation
  #         headers:
  #           X-Rate-Limit:
  #             description: calls per hour allowed by the user
  #             schema:
  #               type: integer
  #               format: int32
  #           X-Expires-After:
  #             description: date in UTC when token expires
  #             schema:
  #               type: string
  #               format: date-time
  #         content:
  #           application/json:
  #             schema:
  #               type: string
  #       '400':
  #         description: Invalid username/password supplied

  /players/{playerId}:
    put:
      tags:
        - Player
      summary: Update an existing player.
      description: This allows you to update a single player.
      operationId: updatePlayer
      parameters:
        - name: playerId
          in: path
          required: true
          schema:
            type: integer
            format: int64

      requestBody:
        description: This is the player object.
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/player'

      responses:
        '204':
          description: The player has been updated.
        '400':
          description: Invalid ID supplied
        '404':
          description: Player not found

    get:
      tags:
        - Player
      summary: Find player by id.
      description: This allows you to get a single player.
      operationId: getPlayerById
      parameters:
        - name: playerId
          in: path
          required: true
          schema:
            type: integer
            format: int64

      responses:
        '200':
          description: Successful return of player.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/player'
        '400':
          description: Invalid ID supplied
        '404':
          description: Player not found

  /players/{playerId}/uploadAvatar:
    post:
      tags:
        - Player
      summary: Upload a player avatar.
      description: This allows to upload an image avatar for the player.
      operationId: uploadAvatar
      parameters:
        - name: playerId
          in: path
          description: ID of player to update
          required: true
          schema:
            type: integer
            format: int64

      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary

      responses:
        '204':
          description: The image has been upload.
        '415':
          description: Unsupported media type.

    put:
      tags:
        - Player
      summary: Update a player avatar.
      description: This allows to update an image avatar for the player.
      operationId: updateAvatar
      parameters:
        - name: playerId
          in: path
          description: ID of player to update
          required: true
          schema:
            type: integer
            format: int64

      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary

      responses:
        '200':
          description: The image has been upload.
        '415':
          description: Unsupported media type.

  /players/{playerId}/friends:
    post:
      tags:
        - Player
      summary: Add friend.
      description: This allows to add a friend to a player.
      operationId: addFriend
      parameters:
        - name: playerId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: friendId
          in: query
          required: true
          schema:
            type: integer
            format: int64

      responses:
        '201':
          description: Friend added successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/players'


  /players/{playerId}/games:
    get:
      tags:
        - Player
      summary: Find game by playerId.
      description: This allows you to get a single player.
      operationId: getPlayerById
      parameters:
        - name: playerId
          in: path
          required: true
          schema:
            type: integer
            format: int64

      responses:
        '200':
          description: Successful return of player.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/player'
        '400':
          description: Invalid ID supplied
        '404':
          description: Player not found

  /players/achievements:
    get:
      tags:
        - Achievements
      summary: Show all the player achievements.
      description: This allows to get all the achievements for a player.
      operationId: getAchievements

      responses:
        '200':
          description: Successful return of achievements.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/achievements'

  /players/{playerId}/achievements:
    get:
      tags:
        - Achievements
      summary: Show the achievements for a single player.
      description: This allows to get  the achievements for a single player.
      operationId: getAchievementsByPlayerId
      parameters:
        - name: playerId
          in: path
          required: true
          schema:
            type: integer
            format: int64

      responses:
        '200':
          description: Successful return of achievements.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/achievement'
        '400':
          description: Invalid ID supplied
        '404':
          description: Player not found

  /channels:
    post:
      tags:
        - Channels
      summary: Add channel.
      description: This allows you to add a channel.
      operationId: addChannel

      requestBody:
        description: This is the channel object.
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/channels'

      responses:
        '201':
          description: The player has been created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/channels'


    get:
      tags:
        - Channels
      summary: Returns all the channels.
      description: This allows get all channels.
      operationId: getChannels

      responses:
        '200':
          description: Successful list of channels.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/channels'

  /players/{playerId}/chats:
    post:
      tags:
        - Chats
      summary: Create a chat.
      description: ""
      operationId: createChat
      parameters:
        - name: playerId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '201':
          description: Chat created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/channels' #todo check this schema
        '403':
          description: Access denied

    get:
      tags:
        - Chats
      summary: Find all the chats associated to a playerId.
      description: This allows to retrieve all the chats from a single player.
      operationId: getChatsByPlayerId
      parameters:
        - name: chatId
          in: path
          required: true
          schema:
            type: integer
            format: int64

      responses:
        '200':
          description: Successful return of player.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/channels'
        '400':
          description: Invalid ID supplied
        '404':
          description: Chat not found

  /players/{playerId}/chats/{chatId}/messages:
    post:
      tags:
        - Chats
      summary: Create a message.
      description: ""
      operationId: createMessage
      parameters:
        - name: playerId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '201':
          description: Message created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/channels' #todo check this schema
        '403':
          description: Access denied

# https://app.chatwoot.com/api/v1/accounts/{account_id}/conversations/{conversation_id}/messages



components:
  schemas:
    players:
      type: array
      items:
        $ref: '#/components/schemas/player'

    player:
      type: object
      required:
        - username
      properties:
        playerId:
          readOnly: true
          type: integer
        username:
          type: string
        #todo: tbd,depending of 2FA
        email:
          type: string
        #todo: check avatar
        # avatar:
        #     type: string
        #     format: binary
        hasCustomAvatar:
          readOnly: true
          type: boolean
        2fAuthentic:
          readOnly: true
          type: boolean

    achievement:
      type: object
      properties:
        playerId:
          type: integer
        username:
          type: string
        achievementName:
          type: string
        gameScore:
          type: integer
      items:
        $ref: '#/components/schemas/achievement'

    achievements:
      type: array
      items:
        $ref: '#/components/schemas/achievement'

    channels:
      type: object
      properties:
        channelId:
          readOnly: true
          type: integer
        channelName:
          type: integer
        channelOwner:
          type: integer
        channelAdmins:
          type: array
          items:
            $ref: '#/components/schemas/players' #check this
        channelMembers:
          type: array
          items:
            $ref: '#/components/schemas/players' #check this
        privacy:
          type: string
          enum:
            - public
            - private
            - protected
      items:
        $ref: '#/components/schemas/channels'

    chat:
      type: object
      properties:
        playerId:
          readOnly: true
          type: integer

    message:
      type: object
      required:
        - playerId
        - chatId
      properties:
        playerId:
          type: integer
        chatId:
          type: integer
        content:
          type: string
        dateCreated:
          type: string
          format: date



# https://app.chatwoot.com/api/v1/accounts/{account_id}/conversations
# https://app.chatwoot.com/api/v1/accounts/{account_id}/conversations/{conversation_id}
# https://app.chatwoot.com/api/v1/accounts/{account_id}/conversations/{conversation_id}/messages
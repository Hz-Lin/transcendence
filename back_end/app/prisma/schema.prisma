// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

enum ActivityStatus {
    ONLINE
    INGAME
    OFFLINE
}

enum FriendStatus {
    NOT_FRIENDS
    REQUESTED
    PENDING
    FRIENDS
}

enum Role {
    OWNER
    ADMIN
    MEMBER
}

enum ChannelMode {
    PRIVATE
    PROTECTED
    PUBLIC
}

enum ChannelType {
    NORMAL
    DM
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id             Int             @id @default(autoincrement())
    createdAt      DateTime        @default(now())
    updatedAt      DateTime        @updatedAt
    avatar         String?
    name           String          @unique
    intraId        Int             @unique
    intraName      String          @unique
    activityStatus ActivityStatus  @default(ONLINE)
    allOtherUsers  AllOtherUsers[]
    memberships    Membership[]    @relation("UserMembership")
}

model AllOtherUsers {
    id            Int          @id @default(autoincrement())
    intraId       Int
    otherIntraId  Int
    user          User         @relation(fields: [intraId], references: [intraId])
    blockedStatus Boolean      @default(false)
    friendStatus  FriendStatus @default(NOT_FRIENDS)

    @@unique([intraId, otherIntraId])
}

model Channel {
    id           Int           @id @default(autoincrement())
    channelMode  ChannelMode
    channelName  String        @unique
    channelType  ChannelType   @default(NORMAL)
    password     String        @default("")
    userMessages UserMessage[]
    memberships  Membership[]  @relation("ChannelMembership")
}

model Membership {
    id          Int     @id @default(autoincrement())
    role        Role    @default(MEMBER)
    user        User    @relation("UserMembership", fields: [intraId], references: [intraId])
    intraId     Int
    channel     Channel @relation("ChannelMembership", fields: [channelName], references: [channelName], onDelete: Cascade)
    channelName String

    @@unique([intraId, channelName])
}

model UserMessage {
    id          Int      @id @default(autoincrement())
    intraId     Int
    name        String
    text        String
    channel     Channel? @relation(fields: [channelName], references: [channelName], onDelete: Cascade)
    channelName String?
}

model Client {
    id      String @unique
    intraId Int    @unique
}

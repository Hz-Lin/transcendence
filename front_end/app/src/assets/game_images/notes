// update() {
// 	const ballPosition = {
// 		top: this.ballPosition.top + this.ballVelocity.y,
// 		left: this.ballPosition.left + this.ballVelocity.x,
// 	};
// 	if (ballPosition.top <= 0 || ballPosition.top >= (600 - 20)) {
// 	this.ballVelocity.y = -this.ballVelocity.y;
// 	}
// 	if (ballPosition.left <= 0 || ballPosition.left >= (800 - 20)) {
// 		this.ballVelocity.x = -this.ballVelocity.x;
// 	}
// 	this.socket.emit('updateBallPosition', ballPosition);
// 	this.ballPosition = ballPosition;
// 	requestAnimationFrame(this.update);
// 	},

<template>
	<div class="pong-game">
	<div class="player1-paddle" :style="{ top: player1Position + 'px' }"></div>
	<div class="player2-paddle" :style="{ top: player2Position + 'px' }"></div>
	<div class="ball" :style="{ top: ballPosition.top + 'px', left: ballPosition.left + 'px' }"></div>
	</div>
</template>

<script>
	import io from 'socket.io-client';

	export default {
	data() {
		return {
		player1Position: 0,
		player2Position: 0,
		ballPosition: { top: 0, left: 0 },
		ballVelocity: { x: 5, y: 5 },
		socket: null,
		};
	},
	mounted() {
		this.socket = io('http://localhost:3001/pong-game', { withCredentials: true });
		this.socket.on('updateGameState', (gameState) => {
		this.player1Position = gameState.player1Position;
		this.player2Position = gameState.player2Position;
		this.ballPosition = gameState.ballPosition;
		});
		window.addEventListener('keydown', (event) => {
		if (event.key === 'ArrowUp') {
		this.movePaddle(-10); // move the paddle up by 10 pixels
		} else if (event.key === 'ArrowDown') {
		this.movePaddle(10); // move the paddle down by 10 pixels
		} else if (event.key === ' ') {
			this.ballVelocity = { x: 5, y: 5 };
		}
		});
		this.socket.on('movePaddle', (position) => {
		// Update the position of the paddle based on the position received from the socket
		this.player2Position += position;
		});
		this.update(); // call the update method to start the game loop
	},
	methods: {
    movePaddle(position) {
		const newPosition = this.player1Position + position;
		if (newPosition <= (600 - 100) && newPosition >= 0){
		this.socket.emit('movePaddle', position);
		this.player1Position = newPosition;
		}
    },
	update() {
	const ballPosition = {
		top: this.ballPosition.top + this.ballVelocity.y,
		left: this.ballPosition.left + this.ballVelocity.x,
	};
	if (ballPosition.top <= 0 || ballPosition.top >= (600 - 20)) {
		this.ballVelocity.y = -this.ballVelocity.y;
	}
	if (ballPosition.left <= 0 || ballPosition.left >= (800 - 20)) {
		this.ballVelocity.x = -this.ballVelocity.x;
	}
	this.socket.emit('updateBallPosition', ballPosition);
	this.ballPosition = ballPosition;
	requestAnimationFrame(this.update);
	},
  },
};
